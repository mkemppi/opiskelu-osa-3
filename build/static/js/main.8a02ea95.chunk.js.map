{"version":3,"sources":["services/person.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Filter","props","onChange","handleSearchChange","Persons","personsToShow","setPersons","setMessage","map","person","key","name","persons","Person","phone","onClick","event","window","confirm","personService","filter","p","catch","error","PersonForm","onSubmit","addPerson","handleChange","handlePhoneChange","type","Notification","message","setTimeout","className","App","useState","newName","setNewName","newPhone","setNewPhone","search","setSearch","useEffect","initialPersons","toLowerCase","includes","preventDefault","val","findPerson","find","changedPerson","returnedPerson","concat","target","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.8a02ea95.chunk.js","sourcesContent":["import axios from 'axios'\r\n//const baseUrl = 'http://localhost:3001/api/persons'\r\n//const baseUrl = 'https://secret-sands-02873.herokuapp.com/api/persons'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React, { useState,useEffect } from 'react'\nimport personService from './services/person'\n\nconst Filter = (props) => {\n  return (\n    <div>\n      Hae: <input onChange={props.handleSearchChange} />\n    </div>\n  )\n}\n\nconst Persons = (props) => {\n  const { personsToShow, setPersons, setMessage } = props\n  return (\n    personsToShow.map(person => \n      <Person \n        key={person.name} \n        persons={personsToShow} \n        person={person} \n        setPersons={setPersons} \n        setMessage={setMessage} />\n    )\n  )\n}\n\nconst Person = (props) => {\n  const { person, setPersons, persons, setMessage } = props\n  const removePerson = (event) => {\n    if(window.confirm(\"Oletko varma että haluat poistaa henkilön \"+person.name)) {\n      personService\n      .remove(person.id)\n        .then(() => {\n        setPersons(persons.filter(p => p.id !== person.id))\n        setMessage(['error','Tiedot poistettu'])\n\n      })\n      .catch(error => {\n        setPersons(persons.filter(p => p.id !== person.id))\n        setMessage(['error','Tiedot oli jo poistettu ennestään'])\n      })\n    }\n  } \n  return (\n    <div>{person.name} {person.phone} <button onClick={removePerson}>Poista</button></div>\n  )\n\n}\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.addPerson}> \n      <div>\n        Nimi: <input onChange={props.handleChange} />\n      </div>\n      <div>\n        Puhelinnumero: <input onChange={props.handlePhoneChange} />\n      </div>\n      <div>\n        <button type=\"submit\">Lisää</button>\n      </div>\n    </form>\n  )\n}\n\nconst Notification = ({ message,setMessage }) => {\n  if (message === null) {\n    return null\n  }\n  setTimeout(() => {\n    setMessage(null)\n  }, 5000)\n\n  return (\n    <div className={message[0]}>\n      {message[1]}\n    </div>\n  )\n}\n\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setNewPhone ] = useState('')\n  const [ search, setSearch ] = useState('')\n  const [ message, setMessage ] = useState(null)\n  useEffect(() => {\n    personService\n      .getAll()\n        .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    let val = newName.toLowerCase();\n    //let matches = persons.filter(test => test.name.toLowerCase().includes(val));\n    const findPerson = persons.find(p => p.name.toLowerCase() === val)\n    if(findPerson) {\n      if(window.confirm(`${newName} on jo lisätty puhelinluetteloon, haluatko korvata vanhan numeron uudella?`)) {\n\n        //const findPerson = persons.find(p => p.name === newName)\n        const changedPerson = { ...findPerson, phone: newPhone }\n        \n        personService\n        .update(changedPerson.id, changedPerson)\n          .then(response => {\n          setPersons(persons.map(person => person.name !== newName ? person : response))\n        })\n        \n        setMessage(['success','Tiedot päivitetty'])\n      }\n    } else {      \n      const personObject = {\n        name: newName,\n        phone: newPhone\n      }\n\n      personService\n      .create(personObject)\n        .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setNewName('')\n      })\n\n      setMessage(['success','Tiedot lisätty'])\n      /*\n      axios\n      .post('http://localhost:3001/persons', personObject)\n      .then(response => {\n        setPersons(persons.concat(response.data))\n        setNewName('')\n      })\n      */\n    }\n  }\n\n  const handleChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handlePhoneChange = (event) => {\n    setNewPhone(event.target.value)\n  }\n  const handleSearchChange = (event) => {\n    setSearch(event.target.value) \n  }\n\n  const personsToShow = (search===\"\")\n  ? persons\n  : persons.filter(person => person.name.toLowerCase().includes(search.toLowerCase()))\n\n  return (\n    <div>\n      <h2>Puhelinluettelo</h2>\n      <Notification message={message} setMessage={setMessage} />\n      <PersonForm addPerson={addPerson} handleChange={handleChange} handlePhoneChange={handlePhoneChange} />\n      <h2>Numerot</h2>\n      <Filter handleSearchChange={handleSearchChange} />\n      <Persons personsToShow={personsToShow} setPersons={setPersons} setNewName={setNewName} setMessage={setMessage} />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}